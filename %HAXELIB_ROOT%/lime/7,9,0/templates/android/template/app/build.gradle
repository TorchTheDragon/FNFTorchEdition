import groovy.swing.SwingBuilder
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.border.EmptyBorder;

apply plugin: 'com.android.application'

android {
	compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
	buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
	
	defaultConfig {
		applicationId "::META_PACKAGE_NAME::"
		minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
		targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
		versionCode Integer.parseInt(project.VERSION_CODE)
		versionName project.VERSION_NAME
		::if (languages != null)::resConfigs ::foreach languages::"::__current__::", ::end::""::end::
	}
	
	::if KEY_STORE::
	signingConfigs {
		if (project.KEY_STORE_PASSWORD == 'null') {
			def keyStoreFile = project.KEY_STORE.split('/')
			keyStoreFile = keyStoreFile[keyStoreFile.length - 1]
			project.KEY_STORE_PASSWORD = getPassword('\nPlease enter key password for ' + keyStoreFile + ':');
		}
		
		if (project.KEY_STORE_ALIAS_PASSWORD == 'null') {
			project.KEY_STORE_ALIAS_PASSWORD = getPassword("\nPlease enter key alias password for alias " + project.KEY_STORE_ALIAS + ":")
		}
		
		release {
			storeFile file(project.KEY_STORE)
			storePassword project.KEY_STORE_PASSWORD
			keyAlias project.KEY_STORE_ALIAS
			keyPassword project.KEY_STORE_ALIAS_PASSWORD
		}
	}
	::else::
	File signingFile = file('signing.properties')
	if(signingFile.exists()) {
		Properties signing = new Properties()
		signing.load(new FileInputStream(signingFile))
		
		signingConfigs {
			release {
				storeFile file(signing["KEY_STORE"])
				storePassword signing["KEY_STORE_PASSWORD"]
				keyAlias signing["KEY_STORE_ALIAS"]
				keyPassword signing["KEY_STORE_ALIAS_PASSWORD"]
			}
		}
	} else {
		signingConfigs {
			release
		}
	}
	::end::
	
	buildTypes {
		release {
			minifyEnabled false
			signingConfig signingConfigs.release
		}
	}
	
	android.applicationVariants.all { variant ->
		variant.outputs.all { output ->
			if (outputFileName != null && outputFileName.endsWith('.apk')) {
				outputFileName =  "::APP_FILE::-" + variant.buildType.name + ".apk"
			}
		}
	}
}

dependencies {
	api fileTree(dir: 'libs', include: ['*.jar'])
	::if (ANDROID_LIBRARY_PROJECTS)::::foreach (ANDROID_LIBRARY_PROJECTS)::api project(':deps:::name::')
	::end::::end::
}

def getPassword(message) {
	def password = '';
	if (System.console() == null) {
		new SwingBuilder().edt {
			dialog(
				title: 'Enter password',
				alwaysOnTop: true,
				size: [350, 150],
				resizable: false,
				locationRelativeTo: null,
				pack: true,
				modal: true,
				show: true
			) {
				lookAndFeel('system')
				
				panel(border: new EmptyBorder(10, 10, 10, 10)) {
					gridBagLayout()
					def gbc = new GridBagConstraints();
					
					gbc.gridx = 0
					gbc.gridy = 0
					gbc.fill = GridBagConstraints.HORIZONTAL
					gbc.insets = [0, 0, 10, 0]
					label(
						text: '<html>' +
						'<body style="width: 350px">' +
						message +
						'</body>' +
						'</html>',
						constraints: gbc)
					
					gbc.gridy = 1
					input = passwordField(constraints: gbc)
					
					gbc.gridy = 2
					gbc.fill = GridBagConstraints.NONE
					gbc.insets = [0, 0, 0, 0]
					gbc.ipadx = 50
					button = button(
						defaultButton: true,
						text: 'OK',
						actionPerformed: {
							password = input.password
							dispose()
						},
						constraints: gbc)
				}
			}
		}
	} else {
		password = System.console().readPassword(message)
	}
	return new String(password)
}
